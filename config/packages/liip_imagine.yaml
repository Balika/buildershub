#liip_imagine:
#    # valid drivers options include "gd" or "gmagick" or "imagick"
#    driver: "gd"
#
#    # define your filter sets under this option
#    filter_sets:
#
#        # an example thumbnail transformation definition
#        # https://symfony.com/doc/current/bundles/LiipImagineBundle/basic-usage.html#create-thumbnails
#        squared_thumbnail:
#
#            # set your image quality defaults
#            jpeg_quality:          85
#            png_compression_level: 8
#
#            # setup the filter steps to apply for this transformation
#            filters:
#
#                # auto rotate the image using EXIF metadata
#                auto_rotate: ~
#
#                # strip the image of all metadata
#                strip: ~
#
#                # scale and square the image to the given dimensions
#                thumbnail:
#                    size:          [253, 253]
#                    mode:          outbound
#                    allow_upscale: true
#
#                # create border by placing image on larger black background
#                background:
#                    size:     [256, 256]
#                    position: center
#                    color:    '#fff'
liip_imagine:              
    resolvers:
        cache_resolver_local:                   
             web_path:
                web_root: "%kernel.root_dir%/../public"
                cache_prefix: uploads/media/cache
    loaders:
        loader_aws_s3_images:
            stream:
                # This refers to knp_gaufrette filesystems configuration
                wrapper: gaufrette://image_fs/
                
        loader_aws_s3_documents:
            stream:
                # This refers to knp_gaufrette filesystems configuration
                wrapper: gaufrette://filesystem_aws_s3_documents/
                
    cache: cache_resolver_local

    data_loader: loader_aws_s3_images
    
    filter_sets :        
        # the name of the "filter set"
        cache: ~
        hub_thumbnail:           
            # adjust the image quality to 75%
            quality : 75
            # list of transformations to apply (the "filters")           
            filters :
                # create a thumbnail: set size to 120x90 and use the "outbound" mode
                # to crop the image when the size ratio of the input differs
                thumbnail  : { size : [280, 200], mode : outbound }
        hub_thumbnail_sm:                      
            # adjust the image quality to 75%
            quality : 90
            # list of transformations to apply (the "filters")            
            filters :
                # create a thumbnail: set size to 120x90 and use the "outbound" mode
                # to crop the image when the size ratio of the input differs
                thumbnail  : { size : [75, 75], mode : outbound }
        hub_medium:                      
            # adjust the image quality to 75%
            quality : 80
            # list of transformations to apply (the "filters")          
            filters :
                # create a thumbnail: set size to 120x90 and use the "outbound" mode
                # to crop the image when the size ratio of the input differs
                thumbnail  : { size : [810,453], mode : outbound }
        hub_large:                       
            # adjust the image quality to 75%
            quality : 100
            # list of transformations to apply (the "filters")            
        profile_cover:                     
            # adjust the image quality to 75%
            quality : 95                  
            # list of transformations to apply (the "filters")
            filters :
                # create a thumbnail: set size to 120x90 and use the "outbound" mode
                # to crop the image when the size ratio of the input differs
                thumbnail  : { size : [1200,300], mode : outbound }