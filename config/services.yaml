# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'
    domain: '%env(DOMAIN)%'
    app_locales: en|fr|de|es|cs|nl|ru|uk|ro|pt_BR|pl|it|ja|id|ca|sl|hr|zh_CN|bg

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\Services\PersistenceService:       
        public: true
        arguments: 
            $rootDir: "%kernel.root_dir%"
            
    # Twig extensions
    App\Twig\HubExtensions:
        tags: ['twig.extension']  
        
    App\Listeners\Notifier:
        tags:
            - { name: doctrine.event_listener, event: postPersist }
            - { name: doctrine.event_listener, event: preUpadte }
        
    # Interfaces added as services        
    App\Model\AccountInterface: '@App\Services\AccountService'
    
    App\Model\FirmProfileInterface: '@App\Services\FirmProfileService'
    App\Model\AppInterface: '@App\Services\AppManager'
 
    
    app.buildershub_form_login_authenticator:
        alias: App\Security\LoginAuthenticator  
        
    app.buildershub_user_provider:
        alias: App\Services\UserProvider  
        
        
    App\Services\MessagingService:    
        public: true           
        arguments: 
            $twilio: '@twilio.client'
            $apiKey: '%env(SMS_API_KEY)%'
            $apiSecret: '%env(SMS_API_SECRET)%'
    
    
    ########################### AMAZON S3 STORAGE ##########################
    hub.s3Credentials:
        class: Aws\Credentials\Credentials
        arguments: ["%env(ASSETS_KEY)%", "%env(ASSETS_SECRET)%"]
    
    app.assets.s3:
        class: Aws\S3\S3Client
        public: true
        arguments:
            -
                version: 'latest'
                region: '%env(ASSETS_REGION)%'
                credentials: "@hub.s3Credentials"
                     
    App\Services\MultipleFilesUploaderService:    
        public: true           
        arguments: 
            $s3Client: "@app.assets.s3"  
            $bucket: '%env(ASSETS_BUCKET)%'
            
                    
    league.flysystem.s3adaptor:
        class: League\Flysystem\AwsS3v3\AwsS3Adapter
        arguments: ['@app.assets.s3', '%env(ASSETS_BUCKET)%']

    league.flysystem.filesystem:
        class: League\Flysystem\Filesystem
        arguments: ['@league.flysystem.s3adaptor']
        calls:
            - [addPlugin, ['@oneup_flysystem.plugin.list_with']] 
            
    cache_resolver_aws_s3:
        class: Liip\ImagineBundle\Imagine\Cache\Resolver\AwsS3Resolver
        arguments:
            - "@app.assets.s3"
            - "%env(ASSETS_BUCKET)%"
            - "public-read" 
            - { Scheme: https }
            - { CacheControl: "max-age=86400" }
        tags:
            - { name: 'liip_imagine.cache.resolver', resolver: 'amazon_s3' }
            
    event.listener.service:
        alias: App\Services\EventListenerService
        public: true
        
    App\Services\KnpPaginatorWrapper:  
        public: true
        tags:
            - { name: knp_paginator.injectable, paginator: knp_paginator }
   
    app.menu.voter.request:
        alias: App\Utils\RequestVoter      
        public: true     
            
    app.portal_menu_builder:
        alias: App\Menu\PortalMenuBuilder
             
    app.portal_menu:
        class: Knp\Menu\MenuItem 
        factory: ["@app.portal_menu_builder", createPortalMenu]       
        tags:
            - { name: knp_menu.menu, alias: portal_menu }
        public: true     
        
    app.hubernize_menu_builder:
        alias: App\Menu\HubMenuBuilder
             
    app.hub_menu:
        class: Knp\Menu\MenuItem 
        factory: ["@app.hubernize_menu_builder", createHubMenu]       
        tags:
            - { name: knp_menu.menu, alias: hub_menu }
        public: true        
            
####################################### HOST LISTENER #######################################
    host_listener_service:
        class: App\Listeners\HostListener
        arguments:            
           $baseHost: "%domain%"
        tags:
            -
                name: kernel.event_listener
                method: onKernelRequest
                event: kernel.request
                priority: 120
                
    client_request_listener:
        class: App\Listeners\ClientRequestListener
        arguments:            
           $accessKey: "%env(IP_STACK_ACCESS_KEY)%"
        tags:
            -
                name: kernel.event_listener
                method: onKernelRequest
                event: kernel.request
                priority: 80
                
    App\Services\AppManager:    
        public: true           
        arguments:            
           $baseHost: "%domain%"
           
    ## FILETRS CONFIGURATION
    tenant.doctrine.filter.configurator:
        class: App\Filters\TenantConfigurator   
        public: true
        tags:
            - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest} 
#############################################################################################
########################### SONATA ADMIN SETUP PANEL ########################################
#############################################################################################
    
################################ USER ACCOUNT MANAGEMENT ####################################     
    admin.user:
        class: App\Admin\UserAdmin
        arguments: [~, App\Entity\User, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: "User Manager", label: Users }
        public: true
        
    admin.builder:
        class: App\Admin\BuilderAdmin
        arguments: [~, App\Entity\Builder, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: "User Manager", label: Builders }
        public: true
        
################################ BLOG POST SETUP ####################################        
    admin.post_category:
        class: App\Admin\PostCategoryAdmin
        arguments: [~, App\Entity\PostCategory, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: "Blog Posts", label: Post Categories }
        public: true
        calls:
            - method: setSlugger
              arguments:
                  - '@App\Utils\Slugger'
    admin.blog_post:
        class: App\Admin\BlogAdmin
        arguments: [~, App\Entity\BlogPost, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: "Blog Posts", label: Posts }
        public: true
        calls:
            - method: setSlugger
              arguments:
                  - '@App\Utils\Slugger'

####################### Utility Backend Setup ###################################
    admin.town:
        class: App\Admin\TownAdmin
        arguments: [~, App\Entity\Town, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: "Backend Setup", label: Towns }
        public: true
        calls:
            - method: setSlugger
              arguments:
                  - '@App\Utils\Slugger'
                  
    admin.rating_measure:
        class: App\Admin\RatingMeasureAdmin
        arguments: [~, App\Entity\RatingMeasure, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: "Backend Setup", label: Rating Measures }
        public: true
        
    admin.category:
        class: App\Admin\CategoryAdmin
        arguments: [~, App\Entity\Category, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: "Backend Setup", label: Categories }
        public: true
        calls:
            - method: setSlugger
              arguments:
                  - '@App\Utils\Slugger'
                  
    admin.specialty:
        class: App\Admin\SpecialtyAdmin
        arguments: [~, App\Entity\Specialty, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: "Backend Setup", label: Builders Specialties }
        public: true
        calls:
            - method: setSlugger
              arguments:
                  - '@App\Utils\Slugger'
                  
    admin.region:
        class: App\Admin\RegionAdmin
        arguments: [~, App\Entity\Region, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: "Backend Setup", label: Regions }
        public: true
        
        
####################### STORE SETUP ###############################
    admin.product_category:
        class: App\Admin\ProductCategoryAdmin
        arguments: [~, App\Entity\ProductCategory, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: "Store Setup", label: Product Categories }
        public: true
        calls:
            - method: setSlugger
              arguments:
                  - '@App\Utils\Slugger' 
                  
    admin.featured_category:
        class: App\Admin\FeaturedCategoryAdmin
        arguments: [~, App\Entity\FeaturedCategory, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: "Store Setup", label: Featured Category }
        public: true
        
    admin.hub_bid:
        class: App\Admin\HubBidsAdmin
        arguments: [~, App\Entity\HubBid, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: "Store Setup", label: Hub Bid Slots }
        public: true
        
####################### HUB APPS AND MENUS ###############################
    admin.hub_app:
        class: App\Admin\HubAppAdmin
        arguments: [~, App\Entity\HubApp, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: "Apps & Menus Setup", label: Hub Apps }
        public: true
        
    admin.app_menu_item:
        class: App\Admin\AppMenuItemAdmin
        arguments: [~, App\Entity\AppMenuItem, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: "Apps & Menus Setup", label: Apps Menu Items}
        public: true